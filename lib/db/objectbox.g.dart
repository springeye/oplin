// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../db/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3012258286018335801),
      name: 'Note',
      lastPropertyId: const IdUid(14, 976320418448264123),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7775219446737320582),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7312636168272559029),
            name: 'uuid',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 542079099268664184)),
        ModelProperty(
            id: const IdUid(3, 1178406778336845374),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9060688304225128672),
            name: 'synced',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9066827933604967001),
            name: 'notebookId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3796715598458150820),
            name: 'createTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3737786213298641196),
            name: 'updateTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6494571222369768426),
            name: 'deleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 24080081291860311),
            name: 'version',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2425801320460584492),
            name: 'sticky',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 553612629074884291),
            name: 'syncTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4376089639566966696),
            name: 'conflict',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 976320418448264123),
            name: 'dbContent',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5258373554156289013),
      name: 'Book',
      lastPropertyId: const IdUid(8, 7465108607384454811),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8905299861632040470),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 506341044552188806),
            name: 'uuid',
            type: 9,
            flags: 2048,
            indexId: const IdUid(4, 8094675356025259108)),
        ModelProperty(
            id: const IdUid(3, 9060935761207096339),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 756460414781577875),
            name: 'synced',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1374070128318084868),
            name: 'parentId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8250699189892559399),
            name: 'deleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2374135558372455849),
            name: 'createTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7465108607384454811),
            name: 'sticky',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 5258373554156289013),
      lastIndexId: const IdUid(4, 8094675356025259108),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5226346128073536163],
      retiredIndexUids: const [291590735518755115],
      retiredPropertyUids: const [
        9085887119849854662,
        1329120285121785376,
        5818052819333124427,
        587732048673187962,
        6083180360774585694,
        1511192544412318552,
        7244152113840002312,
        1910076271887859010,
        6365720830571446228
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Note: EntityDefinition<Note>(
        model: _entities[0],
        toOneRelations: (Note object) => [],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final titleOffset = fbb.writeString(object.title);
          final notebookIdOffset = object.notebookId == null
              ? null
              : fbb.writeString(object.notebookId!);
          final conflictOffset = object.conflict == null
              ? null
              : fbb.writeString(object.conflict!);
          final dbContentOffset = fbb.writeString(object.dbContent);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addBool(3, object.synced);
          fbb.addOffset(5, notebookIdOffset);
          fbb.addInt64(6, object.createTime.millisecondsSinceEpoch);
          fbb.addInt64(7, object.updateTime.millisecondsSinceEpoch);
          fbb.addBool(8, object.deleted);
          fbb.addInt64(9, object.version);
          fbb.addBool(10, object.sticky);
          fbb.addInt64(11, object.syncTime?.millisecondsSinceEpoch);
          fbb.addOffset(12, conflictOffset);
          fbb.addOffset(13, dbContentOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final syncTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final object = Note()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..uuid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..synced =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false)
            ..notebookId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..createTime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0))
            ..updateTime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..deleted =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false)
            ..version =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)
            ..sticky =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false)
            ..syncTime = syncTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(syncTimeValue)
            ..conflict = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..dbContent = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 30, '');

          return object;
        }),
    Book: EntityDefinition<Book>(
        model: _entities[1],
        toOneRelations: (Book object) => [],
        toManyRelations: (Book object) => {},
        getId: (Book object) => object.id,
        setId: (Book object, int id) {
          object.id = id;
        },
        objectToFB: (Book object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final nameOffset = fbb.writeString(object.name);
          final parentIdOffset = object.parentId == null
              ? null
              : fbb.writeString(object.parentId!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.synced);
          fbb.addOffset(4, parentIdOffset);
          fbb.addBool(5, object.deleted);
          fbb.addInt64(6, object.createTime.millisecondsSinceEpoch);
          fbb.addBool(7, object.sticky);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Book()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..uuid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..synced =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false)
            ..parentId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..deleted =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false)
            ..createTime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0))
            ..sticky =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.id]
  static final id = QueryIntegerProperty<Note>(_entities[0].properties[0]);

  /// see [Note.uuid]
  static final uuid = QueryStringProperty<Note>(_entities[0].properties[1]);

  /// see [Note.title]
  static final title = QueryStringProperty<Note>(_entities[0].properties[2]);

  /// see [Note.synced]
  static final synced = QueryBooleanProperty<Note>(_entities[0].properties[3]);

  /// see [Note.notebookId]
  static final notebookId =
      QueryStringProperty<Note>(_entities[0].properties[4]);

  /// see [Note.createTime]
  static final createTime =
      QueryIntegerProperty<Note>(_entities[0].properties[5]);

  /// see [Note.updateTime]
  static final updateTime =
      QueryIntegerProperty<Note>(_entities[0].properties[6]);

  /// see [Note.deleted]
  static final deleted = QueryBooleanProperty<Note>(_entities[0].properties[7]);

  /// see [Note.version]
  static final version = QueryIntegerProperty<Note>(_entities[0].properties[8]);

  /// see [Note.sticky]
  static final sticky = QueryBooleanProperty<Note>(_entities[0].properties[9]);

  /// see [Note.syncTime]
  static final syncTime =
      QueryIntegerProperty<Note>(_entities[0].properties[10]);

  /// see [Note.conflict]
  static final conflict =
      QueryStringProperty<Note>(_entities[0].properties[11]);

  /// see [Note.dbContent]
  static final dbContent =
      QueryStringProperty<Note>(_entities[0].properties[12]);
}

/// [Book] entity fields to define ObjectBox queries.
class Book_ {
  /// see [Book.id]
  static final id = QueryIntegerProperty<Book>(_entities[1].properties[0]);

  /// see [Book.uuid]
  static final uuid = QueryStringProperty<Book>(_entities[1].properties[1]);

  /// see [Book.name]
  static final name = QueryStringProperty<Book>(_entities[1].properties[2]);

  /// see [Book.synced]
  static final synced = QueryBooleanProperty<Book>(_entities[1].properties[3]);

  /// see [Book.parentId]
  static final parentId = QueryStringProperty<Book>(_entities[1].properties[4]);

  /// see [Book.deleted]
  static final deleted = QueryBooleanProperty<Book>(_entities[1].properties[5]);

  /// see [Book.createTime]
  static final createTime =
      QueryIntegerProperty<Book>(_entities[1].properties[6]);

  /// see [Book.sticky]
  static final sticky = QueryBooleanProperty<Book>(_entities[1].properties[7]);
}
