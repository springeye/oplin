// Mocks generated by Mockito 5.2.0 from annotations
// in oplin/test/book_bloc_note.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:oplin/db/models.dart' as _i4;
import 'package:oplin/repository/book_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [BookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepository extends _i1.Mock implements _i2.BookRepository {
  MockBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Notebook>> getBooks() =>
      (super.noSuchMethod(Invocation.method(#getBooks, []),
              returnValue: Future<List<_i4.Notebook>>.value(<_i4.Notebook>[]))
          as _i3.Future<List<_i4.Notebook>>);
  @override
  _i3.Future<_i4.Notebook?> findBook(String? uuid) => (super.noSuchMethod(
      Invocation.method(#findBook, [uuid]),
      returnValue: Future<_i4.Notebook?>.value()) as _i3.Future<_i4.Notebook?>);
  @override
  _i3.Future<void> saveBook(_i4.Notebook? book) =>
      (super.noSuchMethod(Invocation.method(#saveBook, [book]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteBook(String? uuid, {bool? physics = false}) => (super
      .noSuchMethod(Invocation.method(#deleteBook, [uuid], {#physics: physics}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> batchDeleteBook(List<String>? uuid,
          {bool? physics = false}) =>
      (super.noSuchMethod(
          Invocation.method(#batchDeleteBook, [uuid], {#physics: physics}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
