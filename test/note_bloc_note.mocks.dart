// Mocks generated by Mockito 5.2.0 from annotations
// in oplin/test/note_bloc_note.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:oplin/db/models.dart' as _i4;
import 'package:oplin/repository/note_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i2.NoteRepository {
  MockNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.Note>> getNotes() =>
      (super.noSuchMethod(Invocation.method(#getNotes, []),
              returnValue: Stream<List<_i4.Note>>.empty())
          as _i3.Stream<List<_i4.Note>>);
  @override
  _i3.Future<_i4.Note?> findNote(String? uuid) =>
      (super.noSuchMethod(Invocation.method(#findNote, [uuid]),
          returnValue: Future<_i4.Note?>.value()) as _i3.Future<_i4.Note?>);
  @override
  _i3.Future<List<_i4.Note>> findNotes(List<String>? uuid) =>
      (super.noSuchMethod(Invocation.method(#findNotes, [uuid]),
              returnValue: Future<List<_i4.Note>>.value(<_i4.Note>[]))
          as _i3.Future<List<_i4.Note>>);
  @override
  _i3.Future<void> saveNote(_i4.Note? note) =>
      (super.noSuchMethod(Invocation.method(#saveNote, [note]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> batchSaveNote(List<_i4.Note>? notes) =>
      (super.noSuchMethod(Invocation.method(#batchSaveNote, [notes]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteNote(String? uuids, {bool? physics = false}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteNote, [uuids], {#physics: physics}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> batchDeleteNote(List<String>? uuids,
          {bool? physics = false}) =>
      (super.noSuchMethod(
          Invocation.method(#batchDeleteNote, [uuids], {#physics: physics}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
